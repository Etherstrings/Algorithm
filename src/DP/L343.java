package DP;

/**
 * @description:
 * @author： wuboyu
 * @date： 2022-07-25 16:54
 */
public class L343 {
    //343. 整数拆分
    //给定一个正整数 n ，将其拆分为 k 个 正整数 的和（ k >= 2 ），并使这些整数的乘积最大化。
    //
    //返回 你可以获得的最大乘积 。
    //
    //
    //
    //示例 1:
    //
    //输入: n = 2
    //输出: 1
    //解释: 2 = 1 + 1, 1 × 1 = 1。
    //示例 2:
    //
    //输入: n = 10
    //输出: 36
    //解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。


    //这一题中 最难的是思考----这个数字怎么拆的时候最大？
        //当前数组为n 那么这个数字可以拆为 1到n-1 + n-1到1

        //什么时候 乘积最大？
            // n = 6
            // 1 2 3 4 5
            // 5 4 3 2 1
            // 1 8 9 8 5
            // 中间最大 j<=n-j
    public int integerBreak(int n) {
        //dp数组的意义是什么?
        //组成当前数字n的乘积
        int[] dp=new int[n+1];

        dp[2]=1;

        for(int i=3;i<=n;i++){
            for(int j=1;j<=i-j;j++){
                // 这里的 j 其实最大值为 i-j,再大只不过是重复而已，
                //并且，在本题中，我们分析 dp[0], dp[1]都是无意义的，
                //j 最大到 i-j,就不会用到 dp[0]与dp[1]

                dp[i]=Math.max(dp[i],Math.max(j*(i-j),j*dp[i-j]));

                // j * (i - j) 是单纯的把整数 i 拆分为两个数 也就是 i,i-j ，再相乘
                //而j * dp[i - j]是将 i 拆分成两个以及两个以上的个数,再相乘。
            }
        }

        return dp[n];
    }

}
